// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("rpc.proto", fileDescriptor_77a6da22d6a3feb1) }

var fileDescriptor_77a6da22d6a3feb1 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x52, 0x9c, 0xb9, 0xc5, 0xe9, 0x10, 0x11,
	0xa3, 0x4d, 0x8c, 0x5c, 0xec, 0xbe, 0xf9, 0x79, 0xc5, 0x25, 0xa9, 0x45, 0x42, 0x1a, 0x5c, 0x9c,
	0x21, 0x45, 0x89, 0x79, 0xc5, 0x39, 0x89, 0x25, 0xa9, 0x42, 0x3c, 0x10, 0x05, 0x7a, 0x81, 0xa5,
	0xa9, 0x45, 0x95, 0x52, 0xbc, 0x50, 0x5e, 0x50, 0x6a, 0x71, 0x69, 0x4e, 0x89, 0x90, 0x0e, 0x17,
	0x77, 0x40, 0x69, 0x4e, 0x8e, 0x6f, 0x6a, 0x49, 0x51, 0x66, 0x72, 0x31, 0x0e, 0xb5, 0x10, 0x59,
	0x03, 0x46, 0x21, 0x6d, 0x90, 0xea, 0xe2, 0x0c, 0x98, 0x6a, 0x54, 0x79, 0x29, 0x6e, 0x28, 0xd7,
	0x2f, 0x3f, 0x2f, 0x55, 0x83, 0x51, 0x48, 0x89, 0x8b, 0xc5, 0x39, 0x23, 0xb1, 0x44, 0x88, 0x0b,
	0xa6, 0xaa, 0x38, 0x5d, 0x0a, 0x89, 0xad, 0xc1, 0x68, 0xc0, 0x68, 0xa4, 0xcd, 0xc5, 0xea, 0x91,
	0x9a, 0x93, 0x93, 0x2f, 0xa4, 0xc4, 0xc5, 0x1c, 0x9c, 0x58, 0x89, 0xd7, 0xad, 0x49, 0x6c, 0x60,
	0x9e, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x09, 0xe3, 0x00, 0x63, 0x07, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MonsterClient is the client API for Monster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonsterClient interface {
	Translate(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error)
	PullMetrics(ctx context.Context, in *Query, opts ...grpc.CallOption) (Monster_PullMetricsClient, error)
	PushMetrics(ctx context.Context, opts ...grpc.CallOption) (Monster_PushMetricsClient, error)
	Chat(ctx context.Context, opts ...grpc.CallOption) (Monster_ChatClient, error)
}

type monsterClient struct {
	cc *grpc.ClientConn
}

func NewMonsterClient(cc *grpc.ClientConn) MonsterClient {
	return &monsterClient{cc}
}

func (c *monsterClient) Translate(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.Monster/Translate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *monsterClient) PullMetrics(ctx context.Context, in *Query, opts ...grpc.CallOption) (Monster_PullMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Monster_serviceDesc.Streams[0], "/proto.Monster/PullMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &monsterPullMetricsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Monster_PullMetricsClient interface {
	Recv() (*Metric, error)
	grpc.ClientStream
}

type monsterPullMetricsClient struct {
	grpc.ClientStream
}

func (x *monsterPullMetricsClient) Recv() (*Metric, error) {
	m := new(Metric)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monsterClient) PushMetrics(ctx context.Context, opts ...grpc.CallOption) (Monster_PushMetricsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Monster_serviceDesc.Streams[1], "/proto.Monster/PushMetrics", opts...)
	if err != nil {
		return nil, err
	}
	x := &monsterPushMetricsClient{stream}
	return x, nil
}

type Monster_PushMetricsClient interface {
	Send(*Metric) error
	CloseAndRecv() (*None, error)
	grpc.ClientStream
}

type monsterPushMetricsClient struct {
	grpc.ClientStream
}

func (x *monsterPushMetricsClient) Send(m *Metric) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monsterPushMetricsClient) CloseAndRecv() (*None, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(None)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *monsterClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Monster_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Monster_serviceDesc.Streams[2], "/proto.Monster/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &monsterChatClient{stream}
	return x, nil
}

type Monster_ChatClient interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ClientStream
}

type monsterChatClient struct {
	grpc.ClientStream
}

func (x *monsterChatClient) Send(m *Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *monsterChatClient) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MonsterServer is the server API for Monster service.
type MonsterServer interface {
	Translate(context.Context, *Query) (*Result, error)
	PullMetrics(*Query, Monster_PullMetricsServer) error
	PushMetrics(Monster_PushMetricsServer) error
	Chat(Monster_ChatServer) error
}

// UnimplementedMonsterServer can be embedded to have forward compatible implementations.
type UnimplementedMonsterServer struct {
}

func (*UnimplementedMonsterServer) Translate(ctx context.Context, req *Query) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Translate not implemented")
}
func (*UnimplementedMonsterServer) PullMetrics(req *Query, srv Monster_PullMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method PullMetrics not implemented")
}
func (*UnimplementedMonsterServer) PushMetrics(srv Monster_PushMetricsServer) error {
	return status.Errorf(codes.Unimplemented, "method PushMetrics not implemented")
}
func (*UnimplementedMonsterServer) Chat(srv Monster_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}

func RegisterMonsterServer(s *grpc.Server, srv MonsterServer) {
	s.RegisterService(&_Monster_serviceDesc, srv)
}

func _Monster_Translate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonsterServer).Translate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Monster/Translate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonsterServer).Translate(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _Monster_PullMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonsterServer).PullMetrics(m, &monsterPullMetricsServer{stream})
}

type Monster_PullMetricsServer interface {
	Send(*Metric) error
	grpc.ServerStream
}

type monsterPullMetricsServer struct {
	grpc.ServerStream
}

func (x *monsterPullMetricsServer) Send(m *Metric) error {
	return x.ServerStream.SendMsg(m)
}

func _Monster_PushMetrics_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonsterServer).PushMetrics(&monsterPushMetricsServer{stream})
}

type Monster_PushMetricsServer interface {
	SendAndClose(*None) error
	Recv() (*Metric, error)
	grpc.ServerStream
}

type monsterPushMetricsServer struct {
	grpc.ServerStream
}

func (x *monsterPushMetricsServer) SendAndClose(m *None) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monsterPushMetricsServer) Recv() (*Metric, error) {
	m := new(Metric)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Monster_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MonsterServer).Chat(&monsterChatServer{stream})
}

type Monster_ChatServer interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ServerStream
}

type monsterChatServer struct {
	grpc.ServerStream
}

func (x *monsterChatServer) Send(m *Msg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *monsterChatServer) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Monster_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Monster",
	HandlerType: (*MonsterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Translate",
			Handler:    _Monster_Translate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PullMetrics",
			Handler:       _Monster_PullMetrics_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PushMetrics",
			Handler:       _Monster_PushMetrics_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _Monster_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// HelloClient is the client API for Hello service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloClient interface {
	Say(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error)
}

type helloClient struct {
	cc *grpc.ClientConn
}

func NewHelloClient(cc *grpc.ClientConn) HelloClient {
	return &helloClient{cc}
}

func (c *helloClient) Say(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/proto.Hello/Say", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HelloServer is the server API for Hello service.
type HelloServer interface {
	Say(context.Context, *Query) (*Result, error)
}

// UnimplementedHelloServer can be embedded to have forward compatible implementations.
type UnimplementedHelloServer struct {
}

func (*UnimplementedHelloServer) Say(ctx context.Context, req *Query) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Say not implemented")
}

func RegisterHelloServer(s *grpc.Server, srv HelloServer) {
	s.RegisterService(&_Hello_serviceDesc, srv)
}

func _Hello_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HelloServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Hello/Say",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HelloServer).Say(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

var _Hello_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Hello",
	HandlerType: (*HelloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Say",
			Handler:    _Hello_Say_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
